定义：
    策略模式是对算法的包装，是把使用算法的责任和算法本身分割开来，委派给不同的对象管理。
    策略模式通常把一个系列的算法包装到一系列的策略类里面，作为一个抽象策略类的子类。
    用一句话来说，就是：“准备一组算法，并将每一个算法封装起来，使得它们可以互换”。下面就以一个示意性的实现讲解策略模式实例的结构。

组成：
    1.运行环境类:Strategy
　　　　这个策略模式运行的环境，其实也就是在哪里使用
　　2.应用场景类:client
　　　　这个就是客户端访问的类，也就是该类的对象所持有的策略
　　3具体策略类：ConcreteStrategy
　　　　具体实现策略类
　　4..抽象策略类：Strategy
　　　　根据不同的需求，产生不同的策略或算法的接口

使用场景：
    1.针对同一种问题的多种处理方式、仅仅是因为具体行为有差别时，
    2.需要安全的封装多种同一类型的操作时
    3.出现同一抽象类有多个子类，而又需要使用if-else或者switch-case来选择具体子类时。

额外：
    此设计模式适用于微服务架构，由于项目的扩展导致的类数量级别的增加，不能共存于多个项目中，否则项目在增加或者删除或者修改具体的策略模式修改量将会翻倍
    客户端选择具体策略模式可用枚举处理，减少if/else。