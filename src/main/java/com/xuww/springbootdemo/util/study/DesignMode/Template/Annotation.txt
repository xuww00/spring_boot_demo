定义：
    定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。
    模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
    通俗的说的就是有很多相同的步骤的，在某一些地方可能有一些差别适合于这种模式，如大话设计模式中说到的考试场景中，每个人的试卷都是一样的，只有答案不一样。
    这种场景就适合于模板方法模式。

代码组成：
    CarModel：抽象具体行为的车启动和停止过程。
    Wcar Ocar ：具体实现CarModel的实现子类。
    Client: 客户端。

适用场景：
    1.一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。
    2.各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子。首先识别现有代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。
    3.控制子类扩展。模板方法只在特定点调用“hook”操作，这样就只允许在这些点进行扩展。

关键点：
　　1、使用抽象类定义模板类，并在其中定义所有的基本方法、模板方法，钩子方法，不限数量，以实现功能逻辑为主。其中基本方法使用final修饰，其中要调用基本方法和钩子方法，基本方法和钩子方法可以使用protected修饰，表明可被子类修改。
　　2、定义实现抽象类的子类，重写其中的模板方法，甚至钩子方法，完善具体的逻辑。

原文地址：https://blog.csdn.net/qq_25827845/article/details/51868973